Updating from v1.X to v2.X
MoviePy v2.0 has undergone some large changes with the aim of making the API more consistent and intuitive. In order to do so multiple breaking changes have been made. Therefore, there is a high likelihood that your pre-v2.0 programs will not run without some changes.

Dropping support of Python 2

Starting with version 2.0, MoviePy no longer supports Python 2, since Python 2 reached its end of life in 2020. Focusing on Python 3.7+ allows MoviePy to take advantage of the latest language features and improvements while maintaining code quality and security.

Users are encouraged to upgrade to a supported version of Python to continue using MoviePy.

moviepy.editor suppression and simplified importation

Before v2.0, it was advised to import from moviepy.editor whenever you needed to do some sort of manual operations, such as previewing or hand editing, because the editor package handled a lot of magic and initialization, making your life easier, at the cost of initializing some complex modules like pygame.

With version 2.0, the moviepy.editor namespace simply no longer exists. You simply import everything from moviepy like this:

from moviepy import * # Simple and nice, the __all__ is set in moviepy so only useful things will be loaded
from moviepy import VideoFileClip # You can also import only the things you really need
Renaming and API unification

One of the most significant change has been renaming all .set_ methods to .with_. More generally, almost all the method modifying a clip now starts by with_, indicating that they work ‘outplace’, meaning they do not directly modify the clip, but instead copy it, modify this copy, and return the updated copy, leaving the original clip untouched.

We advise you to check in your code for any call of method from Clip objects and check for a matching .with_ equivalent.

Massive refactoring of effects

With version 2.0, effects have undergone massive changes and refactoring. Though the logic of why and when applying effects remain globally the same, the implementation changed quite heavily.

If you used any kind of effects, you will have to update your code!

Moving effects from function to classes

MoviePy version 2.0 introduces a more structured and object-oriented approach to handling effects. In previous versions, effects were simply Python functions that manipulated video clips or images. However, in version 2.0 and onwards, effects are now represented as classes.

This shift allows for better organization, encapsulation, and reusability of code, as well as more comprehensible code. Each effect is now encapsulated within its own class, making it easier to manage and modify.

All effects are now implementing the Effect abstract class, so if you ever used any custom effect.

If you ever write your own effect, you will have to migrate to the new object implementation. For more info see Creating your own effects.

Moving from clip.fx to with_effects()

Moving from function to object also meant MoviePy had to drop the method Clip.fx previously used to apply effects in favor of the new with_effects().

For more info about how to use effects with v2.0, see Modify a clip using effects.

Removing effects as clip methods

Before version 2.0, when importing from moviepy.editor the effects was added as clip class method at runtime. This is no longer the case.

If you previously used effect by calling them as clips method, you must now use with_effects().

Dropping many external dependencies and unifying environment

With v1.0, MoviePy relied on many optional external dependencies, trying to gracefully fallback from one library to another in the event one of them was missing, eventually dropping some features when no library was available. This resulted in complex and hard to maintain code for the MoviePy team, as well as fragmented and hard to understand environment for the users.

With v2.0 the MoviePy team tried to offer a simpler, smaller and more unified dependency list, with focusing on pillow for all complex image manipulation, and dropping altogether the usage of ImageMagick, PyGame, OpenCV, scipy, scikit, and a few others.

Removed features

Sadly, reducing the scope of MoviePy and limiting the external libraries mean that some features had to be removed, if you used any of the following features, you will have to create your own replacement:

moviepy.video.tools.tracking
moviepy.video.tools.segmenting
moviepy.video.io.sliders
Miscellaneous signature changes

When updating the API and moving from previous libraries to pillow, some miscellaneous changes also happen, meaning some methods signatures may have changed.

You should check the new signatures if you used any of the following:

TextClip some arguments named have changed and a path to a font file is now needed at object instantiation
clip.resize is now clip.resized
clip.crop is now clip.cropped
clip.rotate is now clip.rotated
Any previous Clip method not starting by with_ now probably start with it
Why all these changes and updating from v1.0 to v2.0?

You may ask yourself why were all these changes introduced? The answer is: time.

MoviePy have seen many evolution since his first release and have became kind of a complex project, with ambitions sometimes too important in regards to available manpower on the development team. Over time, as in any project, inconsistencies have been introduced in order to support new functionalities without breaking current API, and some initial choices no longer reflected the current state of things.

Due to multiple factors, MoviePy have also undergone a long period of time during which the main version distributed through PiPy diverged from the GitHub distributed version, introducing confusion and chaos.

In a global effort to simplify future development and limit confusion by providing a unified environment, it has been decided to release a new major version including the many evolutions than happened over the years, which meant breaking changes, and so a new major version released was required.

For anyone interested in how and why all of these things have been decided, you can find a lot of the discussion that went into this in GitHub issues #1874, #1089 and

Creating your own effects
In addition to the existing effects already offered by MoviePy, we can create our own effects to modify a clip however we want.

Why creating your own effects?

For simple enough tasks, we’ve seen that we can Modify a clip appearance and timing using filters. Though it might be enough for simple tasks, filters are kind of limited:

They can only access frame and/or timepoint
We cannot pass arguments to them
They are hard to maintain and re-use
To allow for more complex and reusable clip modifications, we can create our own custom effects, that we will later apply with with_effects().

For example, imagine we want to add a progress bar to a clip, to do so we will not only need the time and image of the current frame, but also the total duration of the clip. We will also probably want to be able to pass parameters to define the appearance of the progress bar, such as color or height. This is a perfect task for an effect!

Creating an effect

In MoviePy, effects are objects of type moviepy.Effect.Effect, which is the base abstract class for all effects (kind of the same as Clip is the base for all VideoClip and AudioClip).

So, to create an effect, we will need to inherit the Effect class, and do two things:

Create an __init__ method to be able to received the parameters of our effect.
Implement the inherited apply() method, which must take as an argument the clip we want to modify, and return the modified version.
In the end, your effect will probably use time_transform(), image_transform(), or transform() to really apply your modifications on the clip, The main difference is, because your filter will be a method or an anonymous function inside your effect class, you will be able to access all properties of your object from it!

So, lets see how we could create our progress bar effect:

"""Let's write a custom effect that will add a basic progress bar
at the bottom of our clip."""

from moviepy import VideoClip
from moviepy.decorators import requires_duration


# Here you see a decorator that will verify if our clip have a duration
# MoviePy offer a few of them that may come handy when writing your own effects
@requires_duration
def progress_bar(clip: VideoClip, color: tuple, height: int = 10):
    """
    Add a progress bar at the bottom of our clip

     Parameters
    ----------

      color: Color of the bar as a RGB tuple
      height: The height of the bar in pixels. Default = 10
    """

    # Because we have define the filter func inside our global effect,
    # it have access to global effect scope and can use clip from inside filter
    def filter(get_frame, t):
        progression = t / clip.duration
        bar_width = int(progression * clip.w)

        # Showing a progress bar is just replacing bottom pixels
        # on some part of our frame
        frame = get_frame(t)
        frame[-height:, 0:bar_width] = color

        return frame

    return clip.transform(filter, apply_to="mask")
Note
When creating an effect, you frequently have to write boilerplate code for assigning properties on object initialization, dataclasses is a nice way to limit that.
If you want to create your own effects, in addition of this documentation we strongly encourage you to go and take a look at the existing ones (see moviepy.video.fx and moviepy.audio.fx) to see how they works and take inspiration.


Complete working example for using local images with MoviePy V2:

from collections.abc import Callable
from moviepy import *
from PIL import Image
from PIL.Image import Resampling
import math
import numpy

def zoom_effect(
    clip: VideoClip,
    ratio: float = 0.04,
) -> VideoClip:
    """
    Apply a zoom effect to a clip.
    """

    def _apply(
        get_frame: Callable[[float], numpy.ndarray],
        t: float,
    ) -> numpy.ndarray:
        # Get the frame
        img = Image.fromarray(get_frame(t))
        base_size = img.size

        # Calculate the new size
        new_size = (
            math.ceil(img.size[0] * (1 + (ratio * t))),
            math.ceil(img.size[1] * (1 + (ratio * t))),
        )

        # Make the size even
        new_size = (
            new_size[0] + (new_size[0] % 2),
            new_size[1] + (new_size[1] % 2),
        )

        # Resize the image
        img = img.resize(new_size, Resampling.LANCZOS)

        # Crop the image
        x = math.ceil((new_size[0] - base_size[0]) / 2)
        y = math.ceil((new_size[1] - base_size[1]) / 2)
        img = img.crop((x, y, new_size[0] - x, new_size[1] - y)).resize(
            base_size, Resampling.LANCZOS
        )

        # Convert to numpy array and return
        result = numpy.array(img)
        img.close()
        return result

    return clip.transform(_apply)

size = (1920, 1080)

images = [
    '001.jpg',
    '002.jpg',
    '003.jpg',
    '004.jpg'
]

slides = []
for n, url in enumerate(images):
    slides.append(
        ImageClip(url).with_fps(24).with_duration(5).resized(size)
    )

    slides[n] = zoom_effect(slides[n])

video = concatenate_videoclips(slides)
video.write_videofile('zoomin.mp4')